# Advent of Code - Day 14

```elixir
Mix.install(
  [
    {:kino_aoc, git: "https://github.com/ljgago/kino_aoc"}
  ],
  force: true
)
```

## Section

<!-- livebook:{"attrs":{"day":"14","session_secret":"SESSION","variable":"puzzle_input","year":"2022"},"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} = KinoAOC.download_puzzle("2022", "14", System.fetch_env!("LB_SESSION"))
```

```elixir
input = """
498,4 -> 498,6 -> 496,6
503,4 -> 502,4 -> 502,9 -> 494,9
"""
```

```elixir
defmodule Day14 do
  defstruct rocks: [], bottom: nil, sand: MapSet.new(), infinite_bottom: false

  def parse(input) do
    rocks =
      input
      |> String.split("\n", trim: true)
      |> Enum.map(fn s ->
        String.split(s, " -> ")
        |> Enum.map(fn e ->
          e |> String.split(",") |> Enum.map(&String.to_integer/1)
        end)
        |> Enum.chunk_every(2, 1, :discard)
        |> Enum.map(fn
          [[x, y1], [x, y2]] -> Enum.map(y1..y2, &{x, &1})
          [[x1, y], [x2, y]] -> Enum.map(x1..x2, &{&1, y})
        end)
        |> Enum.flat_map(&Function.identity/1)
      end)
      |> Enum.flat_map(&Function.identity/1)
      |> MapSet.new()

    %__MODULE__{rocks: rocks, bottom: rocks |> Enum.max_by(&elem(&1, 1)) |> elem(1)}
  end

  def make_sand_fall(state, pos \\ {500, 0})

  def make_sand_fall(%__MODULE__{bottom: bottom}, {_x, y}) when y > bottom do
    :halt
  end

  def make_sand_fall(state, {x, y} = pos) do
    cond do
      not blocked(state, {x, y + 1}) ->
        make_sand_fall(state, {x, y + 1})

      not blocked(state, {x - 1, y + 1}) ->
        make_sand_fall(state, {x - 1, y + 1})

      not blocked(state, {x + 1, y + 1}) ->
        make_sand_fall(state, {x + 1, y + 1})

      true ->
        pos
    end
  end

  defp blocked(%__MODULE__{infinite_bottom: false} = state, pos),
    do: MapSet.member?(state.rocks, pos) or MapSet.member?(state.sand, pos)

  defp blocked(%__MODULE__{infinite_bottom: true} = state, pos = {_x, y}),
    do: y == state.bottom or MapSet.member?(state.rocks, pos) or MapSet.member?(state.sand, pos)

  def part1(input) do
    state = Day14.parse(input)

    state =
      Stream.repeatedly(fn -> {500, 0} end)
      |> Enum.reduce_while(
        state,
        fn pos, state ->
          case Day14.make_sand_fall(state, pos) do
            :halt -> {:halt, state}
            sand -> {:cont, update_in(state, [Access.key!(:sand)], &MapSet.put(&1, sand))}
          end
        end
      )

    Enum.count(state.sand)
  end

  def part2(input) do
    state =
      Day14.parse(input)
      |> Map.update!(:bottom, &(&1 + 2))
      |> Map.put(:infinite_bottom, true)

    state =
      Stream.repeatedly(fn -> {500, 0} end)
      |> Enum.reduce_while(
        state,
        fn pos, state ->
          case Day14.make_sand_fall(state, pos) do
            {500, 0} = sand ->
              {:halt, update_in(state, [Access.key!(:sand)], &MapSet.put(&1, sand))}

            :halt ->
              {:halt, state}

            sand ->
              {:cont, update_in(state, [Access.key!(:sand)], &MapSet.put(&1, sand))}
          end
        end
      )

    Enum.count(state.sand)
  end
end

Day14.part2(puzzle_input)
```
